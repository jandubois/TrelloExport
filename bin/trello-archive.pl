use 5.024;
use utf8;
use warnings;

use File::Path qw(make_path);
use File::Spec::Functions qw(catdir catfile);

my $archive = "/tmp/trello";

my $link_dir = catdir($archive, ".links");
make_path($link_dir);

open(my $input, "< :encoding(UTF-8)", $ARGV[0]) or die $!;

sub sanitize {
    $_ = shift;
    s/[^a-zA-Z0-9._-]/ /g;
    s/  +/ /g;
    s/^ +//;
    s/[ ._-]+$//;
    return $_;
}

# perl -nE 'say($1) while /:([a-z_]+):/g' < TrelloExport_20190612180019.md | sort | uniq
my %emoji = (
             angry                 => 'üò†',
             arrow_down            => '‚¨á',
             arrow_forward         => '‚ñ∂',
             arrow_right           => '‚û°',
             arrow_up              => '‚¨Ü',
             arrow_up_down         => '‚Üï',
             ballot_box_with_check => '‚òë',
             bell                  => 'üîî',
             boom                  => 'üí•',
             brain                 => 'üß†',
             cat                   => 'üê±',
             cats                  => 'üê±',
             chicken               => 'üêî',
             confounded            => 'üòñ',
             construction          => 'üöß',
             cry                   => 'üò¢',
             dancer                => 'üíÉ',
             egg                   => 'ü•ö',
             eyes                  => 'üëÄ',
             facepalm              => 'ü§¶',
             fingerscrossed        => 'ü§û',
             fire                  => 'üî•',
             fireworks             => 'üéÜ',
             frowning              => 'üò¶',
             gem                   => 'üíé',
             green_heart           => 'üíö',
             grimacing             => 'üò¨',
             gun                   => 'üî´',
             headdes               => 'ü§¶',
             headdesk              => 'ü§¶',
             laughing              => 'üòÇ',
             ok                    => 'üÜó',
             poop                  => 'üí©',
             pray                  => 'üôè',
             red_circle            => 'üî¥',
             rocket                => 'üöÄ',
             sarcasm               => '‚∏Æ',
             seat                  => 'üí∫',
             smile                 => 'üòÉ',
             smiley_cat            => 'üò∫',
             smiling_imp           => 'üòà',
             smoking               => 'üö¨',
             sunny                 => 'üåû',
             tea                   => 'üçµ',
             thumbsdown            => 'üëé',
             thumbsup              => 'üëç',
             tophat                => 'üé©',
             warning               => '‚ö†',
             white_check_mark      => '‚úÖ',
             x                     => '‚ùå',
            );

my ($board,$list);
my $output;
while (<$input>) {
    chomp;
    s/\A\N{BOM}//;

    if (/^###? / && $output) {
        close($output);
        undef $output;
    }

    if (s/^# //) {
        $board = $_;
        next;
    }

    if (s/^## //) {
        $list = $_;
        next;
    }

    if (s/^### \[(\w{8})\] (\[archived\] )?//) {
        my($id,$archived) = ($1,$2);
        my $card = $_;

        my $dir = catdir($archive, sanitize($board), sanitize($list));
        my $file = catfile($dir, sanitize($card).".md");

        make_path($dir);
        open($output, "> :encoding(UTF-8)", $file) or die;
        symlink($file, catfile($link_dir, $id));

        $card .= " \\[$id\\]";
        $card .= " \\[archived\\]" if $archived;
        say $output "### $card\n";
        say $output "**$list** on **$board**\n";
        next;
    }

    s#:([a-z_]+):#$emoji{$1}//":$1:"#eg;
    s/^(```\S)/ $1/g;

    say $output $_ if defined $output;
}
